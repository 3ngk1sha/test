import { OnModuleInit } from '@nestjs/common';
import { JwtService, JwtSignOptions } from '@nestjs/jwt';
import { NextFunction, Request, Response } from 'express';
import { Attachment } from '@/attachment/schemas/attachment.schema';
import { AttachmentService } from '@/attachment/services/attachment.service';
import { AttachmentFile } from '@/attachment/types';
import { SubscriberCreateDto } from '@/chat/dto/subscriber.dto';
import { AttachmentRef } from '@/chat/schemas/types/attachment';
import { StdOutgoingEnvelope, StdOutgoingMessage } from '@/chat/schemas/types/message';
import { LoggerService } from '@/logger/logger.service';
import { SettingService } from '@/setting/services/setting.service';
import { Extension } from '@/utils/generics/extension';
import { HyphenToUnderscore } from '@/utils/types/extension';
import { SocketRequest } from '@/websocket/utils/socket-request';
import { SocketResponse } from '@/websocket/utils/socket-response';
import { ChannelService } from '../channel.service';
import { ChannelName } from '../types';
import EventWrapper from './EventWrapper';
export default abstract class ChannelHandler<N extends ChannelName = ChannelName> extends Extension implements OnModuleInit {
    protected readonly settingService: SettingService;
    private readonly channelService;
    protected readonly logger: LoggerService;
    private readonly settings;
    readonly attachmentService: AttachmentService;
    protected readonly jwtService: JwtService;
    protected readonly jwtSignOptions: JwtSignOptions;
    constructor(name: N, settingService: SettingService, channelService: ChannelService, logger: LoggerService);
    getName(): N;
    onModuleInit(): Promise<void>;
    setup(): Promise<void>;
    getSettings<S extends string = HyphenToUnderscore<N>>(): Promise<Settings[S]>;
    abstract init(): void;
    abstract handle(req: Request | SocketRequest, res: Response | SocketResponse): any;
    abstract _textFormat(message: StdOutgoingMessage, options?: any): any;
    abstract _quickRepliesFormat(message: StdOutgoingMessage, options?: any): any;
    abstract _buttonsFormat(message: StdOutgoingMessage, options?: any, ...args: any): any;
    abstract _attachmentFormat(message: StdOutgoingMessage, options?: any): any;
    abstract _listFormat(message: StdOutgoingMessage, options: any, ...args: any): any;
    abstract _carouselFormat(message: StdOutgoingMessage, options: any, ...args: any): any;
    abstract sendMessage(event: EventWrapper<any, any, N>, envelope: StdOutgoingEnvelope, options: any, context: any): Promise<{
        mid: string;
    }>;
    getMessageAttachments?(event: EventWrapper<any, any, N>): Promise<AttachmentFile[]>;
    getSubscriberAvatar?(event: EventWrapper<any, any, N>): Promise<AttachmentFile | undefined>;
    getUserData(event: EventWrapper<any, any, N>): Promise<SubscriberCreateDto>;
    abstract getSubscriberData(event: EventWrapper<any, any, N>): Promise<SubscriberCreateDto>;
    persistMessageAttachments(event: EventWrapper<any, any, N>): Promise<void>;
    middleware(_req: Request, _res: Response, next: NextFunction): Promise<void>;
    getPublicUrl(attachment: AttachmentRef | Attachment): Promise<string>;
    hasDownloadAccess(attachment: Attachment, _req: Request): Promise<boolean>;
    download(token: string, req: Request): Promise<import("@nestjs/common").StreamableFile>;
}
